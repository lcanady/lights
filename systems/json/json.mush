/*
#############################################################################
### JSON COMMUNICATION SYSTEM ###############################################

  This is the softcoded JSON subsystem for RhostMUSH.  It's the basis
  behind the frontend working and the server being able to communicate
  with the web in an OOB manner for the webclient and any web based tools.

  functions:
    jencode()       - serialize your json object for transport.
    json()          - creates a container JSON object
    key()           - add a new key/value pair.
    jarray()        - creates an array.
    securestring()  - creates a randomly generated string used to verify
                      communication from the server.
    fn_datatype     - a local function to check what datatype is being
                      passed and if it should add qoutes or not.

  A Typical json string would be composed of these various parts. Everything
  must be composed from a base json() function, but can then be combined and
  nested to create a fully compliant JSON string.

  Ex:
    jencode(
      json(
        key(token, securestring())|
        key(command, AwesomeCommand)|
        key(someArgs,jarray(1 2 3 4 5)), |
      )
    )

  
  Commands:
    jlogin <user> <pass> <string> - log into the game, set your json
                                    totem, and also your security
                                    string for this session.

    @JSON  <string>               - Set the user's json totem, and 
                                    confirm the secure string to attach to
                                    eac subsiquent JSON message sent by the 
                                    game.

#############################################################################
*/


// Conditionally create the JSON object if it doesn't already exist.
@if not(isdbref(tag(json))) = {
    @create Global: JSON;
    @tag/add json = lastcreate(me, t);
    @set #json = safe inherit no_modify;
  }

// add any ufuns to the global function scope.
@startup #json = @dolist lattr(%!/ufun.*) = {
    // Handle each ufun.
    @switch/first lcstr(##)) =
      *.priv.*, {
        @function/priv/pres [after(##, UFUN.PRIV.)] = %!/##;
      },
      { @function/pres [after(##,UFUN.)] = %!/## }
  }

/*
-----------------------------------------------------------------------------
--- ufn.json ----------------------------------------------------------------

  SYNTAX: json(<item> [<item> [<itemN>]], <delim>)

  Creates a JSON object containing key/value pairs, arrays, and other nested
  json objects.  If <delim> is not defined, then it defaults to spaces.

-----------------------------------------------------------------------------
*/


&ufun.json #json = &lbr;[iter(%0, ##, if(words(%1),%1,%b), `)]&rbr;


/*
-----------------------------------------------------------------------------
--- ufun.jencode ------------------------------------------------------------

  SYNTAX: jencode(<jsonTemplate>)
 
  Encode a json template string into a serialized json string ready for 
  transport.

-----------------------------------------------------------------------------
*/


&ufun.jencode #json =
      [setq(0,edit(%0, {")}, {)"}))]
      [iter(
        regeditalllit(
          %q0, 
          &lbr;, %{,
          &rbr;, %},
          &rb;, %],
          &lb;, %[
        ), ## ,`, %,
      )] 
          

/*
-----------------------------------------------------------------------------
--- ufun.key ----------------------------------------------------------------

  SYNTAX: key(key, value)

  used )to format basic key/value pairs.  Doesn't handle

-----------------------------------------------------------------------------
*/

&ufun.key #json = "%0":[u(#json/fn_valuetype, %1)]

/*
-----------------------------------------------------------------------------
--- fn_valuetype ------------------------------------------------------------

  This function adds quotes to a string, if nessisary, else it passes
  other datatypes 'as is'.

-----------------------------------------------------------------------------
*/

&fn_valuetype #json =
  [setq(0, esclist(\(\)\[\]\{\}|%0))]
  [switch(1,
    isnum(%q0), %q0,
    strmatch(lcstr(%q0), &lbr;*&rbr;), %q0,
    strmatch(lcstr(%q0), null), null,
    strmatch(lcstr(%q0), true), true,
    strmatch(lcstr(%q0), false), false,
    strmatch(lcstr(%q0), &lb;*&rb;), %q0,
    "%q0"
  )]

/*
-----------------------------------------------------------------------------
--- ufun.jarray -------------------------------------------------------------

  Convert a list into an array.

  USAGE: jarray(<item> [<item> [<itemN>]], <delim>)

-----------------------------------------------------------------------------
*/

&ufun.jarray #json =
  &lb;
  [iter(
    %0,
    u(#json/fn_valuetype,##),
    if(words(%1),%1,%b), `
  )]&rb;


/*
-----------------------------------------------------------------------------
--- fn.securestring ---------------------------------------------------------

  Create a unique string that can be shared back and forth with the server
  to make sure that the client is getting legit json and not something
  spoofed by a player.  Nothing's perfect, but this should help!

-----------------------------------------------------------------------------
*/

&ufun.securestring #json = get(%0/_securestring)

/*
=============================================================================
=== @json <string> ==========================================================

  A helper command to set a user's json totem, as well as configure their
  securestring for communicating verified json back and forth to the server.

=============================================================================
*/

&cmd.@json #json = $@json *:
  @totem %#=json;
  &_securestring %#=%0;
  &securestring %#=%0;
  @pemit %# = jencode(json(key(cmd, token) |key(token, %0),|));
  @tr %!/hook_json = %#, %0;

@tr #json/startup;
